#!/usr/bin/env python3

"""
Format JSON with indentation. Optionally sorts keys.
"""

import argparse
import ast
import json
import logging
import os
import sys

logging.basicConfig(format="%(module)s: %(levelname)s: %(message)s",
                    level=logging.INFO)
logger = logging.getLogger(__name__)

COLOR_SNIP = "\033[2;3;37m"
COLOR_HERE = "\033[1;3;31m"
COLOR_RESET = "\033[0m"

def is_numeric(value, **kwargs):
  "True if the value looks like a valid number"
  if not value and kwargs.get("empty_ok"):
    return True
  if value.startswith("-"):
    return value[1:].isdigit()
  return value.isdigit()

def to_int(value, empty_value=None, fail_soft=False):
  "Parse a string as an integer, allowing for empty values"
  if value:
    return int(value)
  return empty_value

def convert_maybe(func, value):
  "Return func(value) or None if that raises a ValueError"
  try:
    return func(value)
  except ValueError as err:
    logger.warning("%s(%r) failed with error %s", func, value, err)
    return None

def parse_slice(key):
  """
  Parse a string as either an index or a slice.
  """
  if is_numeric(key):
    return int(key), int(key)+1

  if ":" not in key:
    logger.warning("Failed to parse slice %r: must be numeric or slice", key)
    return None, None

  start_s, stop_s = key.split(":", 1)
  if not is_numeric(start_s, empty_ok=True):
    logger.warning("Failed to parse slice %r: start is not numeric", key)
    return None, None
  if not is_numeric(stop_s, empty_ok=True):
    logger.warning("Failed to parse slice %r: stop is not numeric", key)
    return None, None

  start = to_int(start_s, empty_value=0)
  stop = to_int(stop_s, empty_value=None)
  return start, stop

def lookup_simple(data, key, conv=None):
  """
  Obtain the thing referred to by key in data.
  """
  dtype = type(data).__name__
  value = data
  error = None
  if isinstance(data, (str, list)) and is_numeric(key):
    try:
      value = data[int(key)]
    except IndexError:
      error = ("Invalid index; value outside [0:%d]", len(data))
  elif isinstance(data, (str, list)):
    start, stop = parse_slice(key)
    logger.debug("slice %r -> %r, %r", key, start, stop)
    if start is None and stop is None:
      error = ("Invalid index; index must be numeric or slice",)
    value = data[start:stop]
  elif isinstance(data, dict) and key in data:
    value = data[key]
  elif isinstance(data, dict):
    error = ("Cannot get attribute; key not present in object",)
  elif isinstance(data, (int, bool)):
    error = ("Cannot get attribute of atomic value",)
  else:
    error = ("Unsupported JSON type %s", dtype)
  if error:
    logger.warning(*error)
    logger.warning("Failure getting attribute %r of %s %r", key, dtype, data)

  if conv in ("i", "int"):
    value = convert_maybe(int, value)
  elif conv in ("f", "float"):
    value = convert_maybe(float, value)
  elif conv in ("r", "repr"):
    value = repr(value)
  elif conv is not None:
    logger.warning("Invalid conversion sequence %r; ignoring", conv)
  return value

def lookup_key(data, query):
  "Get a specific thing from within the data"
  curr_data = data
  key, rest, conv = query, "", None
  if "/" in query:
    key, rest = query.split("/", 1)
  elif "!" in query:
    key, conv = query.split("!", 1)
  result_data = lookup_simple(curr_data, key, conv)
  logger.debug("lookup(%r, %r) -> %r", curr_data, key, result_data)
  curr_data = result_data
  if rest:
    curr_data = lookup_key(curr_data, rest)
  return curr_data

def highlight_sequence(text, pos, lead=8, tail=8, color=True):
  "Highlight a subsequence of text at the given position"
  snip_text = "<snip>"
  if color:
    snip_text = "{}{}{}".format(COLOR_SNIP, snip_text, COLOR_RESET)
  here_text = "<HERE>"
  if color:
    here_text = "{}{}{}".format(COLOR_HERE, here_text, COLOR_RESET)
  if pos-lead < 0:
    text_pre = text[:pos]
  else:
    text_pre = snip_text + text[pos-lead:pos]
  if pos+tail > len(text):
    text_post = text[pos:]
  else:
    text_post = text[pos:pos+tail] + snip_text
  logger.debug("Highlighting %d between %r and %r", pos, text_pre, text_post)
  return text_pre + here_text + text_post

def main():
  FileType = argparse.FileType("rt")
  ap = argparse.ArgumentParser(epilog="""
The -l,--lookup option allows for XPath-style access to part of the data
based on a pattern. The components are separated by forward slashes "/".
It also allows for simple numeric conversions using "!".

Syntax:
  PATTERN := TERM [ "/" TERM ]* [ "!" CONV ]
  TERM := any sequence of characters other than "/" and "!"
  CONV := one of "i" "int" "f" "float" "r" "repr"

If TERM is a number and the JSON value is a list or string, then interpret
TERM as an array offset.

If CONV is "i" or "int", return either int(result) or None on failure
If CONV is "f" or "float", return either float(result) or None on failure
If CONV is "r" or "repr", then return repr(result)

  %(prog)s -l 0 -> json[0]
  %(prog)s -l 'data/entries/0/value' -> json["data"]["entries"][0]["value"]
  %(prog)s -l 'data/size!int' -> int(json["data"]["size"])
""", formatter_class=argparse.RawTextHelpFormatter)
  ap.add_argument("path", type=FileType, nargs="*", default=[sys.stdin],
      help="path(s) to read (default: stdin)")
  ag = ap.add_argument_group("querying")
  ag.add_argument("-l", "--lookup", action="append", metavar="PATTERN",
      help="access a specific key (see below)")
  ag = ap.add_argument_group("formatting")
  ag.add_argument("-S", "--lookup-sep", metavar="S",
      help="(with -l,--lookup) join lookups by %(metavar)s")
  mg = ag.add_mutually_exclusive_group()
  mg.add_argument("-e", "--escape", action="store_true",
      help="escape the result for use in JSON.parse()")
  mg.add_argument("-p", "--print-value", action="store_true",
      help="print the values with no escaping")
  mg = ag.add_mutually_exclusive_group()
  mg.add_argument("-1", "--oneline", action="store_const", dest="indent",
      const=None, help="output on a single line")
  mg.add_argument("-i", "--indent", type=int, default=2, metavar="N",
      help="indent level (default: %(default)s)")
  ag.add_argument("-s", "--sort-keys", action="store_true", help="sort keys")
  ag = ap.add_argument_group("diagnostics")
  ag.add_argument("-w", "--width", type=int, default=8, metavar="N",
      help="number of characters to include on error (default: %(default)s)")
  ag.add_argument("-C", "--no-color", action="store_true",
      help="disable error color formatting")
  ag.add_argument("-v", "--verbose", action="store_true", help="be verbose")
  args = ap.parse_args()
  if args.verbose:
    logger.setLevel(logging.DEBUG)

  failure = False
  for fobj in args.path:
    text = fobj.read()
    logger.debug("Formatting %s (%d characters)", fobj.name, len(text))
    try:
      data = json.loads(text)
    except json.JSONDecodeError as e:
      logger.error(e)
      logger.warning(highlight_sequence(text, e.pos,
        lead=args.width, tail=args.width, color=not args.no_color))
      failure = True
      continue

    if args.lookup:
      data_temp = []
      for lookup in args.lookup:
        data_temp.append(lookup_key(data, lookup))
      if args.lookup_sep is not None:
        data_temp = args.lookup_sep.join(str(item) for item in data_temp)
      if len(args.lookup) == 1:
        data_temp = data_temp[0]
      data = data_temp

    if args.print_value:
      result = data
    else:
      result = json.dumps(data, indent=args.indent, sort_keys=args.sort_keys)
      if args.escape:
        result = repr(result)
    print(result)

  if failure:
    raise SystemExit(1)

if __name__ == "__main__":
  main()

# vim: set ft=python ts=2 sts=2 sw=2:
